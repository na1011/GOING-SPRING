<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="going.repository.mybatis.mappers.ItemMapper">

    <sql id="itemResponse">
        select ITEM_ID,
               ITEM_NAME,
               AGENCY_NAME,
               LOCATION,
               PRICE,
               DESCRIPTION,
               DEPARTURE_DATE,
               ARRIVAL_DATE,
               LIKE_COUNT
        from TRAVEL_ITEM
        where DELETE_YN = 0
    </sql>

    <sql id="search">
        <!-- 검색어가 있을 때 -->
        <if test="keyword != null and keyword != ''">
            <choose>
                <!-- 검색 유형이 하나일 때 -->
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <when test="'title'.equals(searchType)">
                            and item_name like '%' || #{keyword} || '%'
                        </when>
                        <when test="'location'.equals(searchType)">
                            and location like '%' || #{keyword} || '%'
                        </when>
                        <when test="'agency'.equals(searchType)">
                            and agency_name like '%' || #{keyword} || '%'
                        </when>
                    </choose>
                </when>
                <otherwise>
                <!-- 전체 검색일 때 -->
                    and (item_name like '%' || #{keyword} || '%'
                    or location like '%' || #{keyword} || '%'
                    or agency_name like '%' || #{keyword} || '%'
                    )
                </otherwise>
            </choose>
        </if>
    </sql>

    <!-- 상품 저장 -->
    <insert id="save">
        insert into TRAVEL_ITEM (ITEM_ID, AGENCY_ID, ITEM_NAME, AGENCY_NAME, LOCATION, PRICE, DESCRIPTION)
        VALUES ( TRAVEL_ITEM_SQ.nextval
               , #{agencyId}
               , #{itemName}
               , #{agencyName}
               , #{location}
               , #{price}
               , #{description})
        <selectKey keyProperty="itemId" resultType="long" order="AFTER">
            select travel_item_sq.currval from dual
        </selectKey>
    </insert>

    <!-- 상품 조회 -->
    <select id="findById" resultType="going.domain.Item" parameterType="long">
        <include refid="itemResponse" />
        and ITEM_ID = #{itemId}
    </select>

    <!-- 상품 수정 -->
    <update id="update">
        update TRAVEL_ITEM
        set ITEM_NAME      = #{itemName},
            LOCATION       = #{location},
            PRICE          = #{price},
            DESCRIPTION    = #{description},
            DEPARTURE_DATE = #{departureDate},
            ARRIVAL_DATE   = #{arrivalDate}
        where DELETE_YN = 0
          and ITEM_ID = #{itemId}
    </update>

    <!-- 상품 삭제 -->
    <update id="deleteById" parameterType="long">
        update TRAVEL_ITEM
        set DELETE_YN = 1
        where ITEM_ID = #{itemId}
    </update>

    <!-- 상품 리스트 조회 -->
    <select id="findAll" parameterType="going.model.common.SearchDto" resultType="going.domain.Item">
        select *
        from (select a.*, ROWNUM as rnum
              from (<include refid="itemResponse" />
                    <include refid="search" />
                    order by ITEM_ID desc) a)
        <![CDATA[
        where rnum >= #{paging.startIndex}
          and rnum <= #{paging.endIndex}
        ]]>
    </select>

    <!-- 상품 총 갯수 카운팅 -->
    <select id="count" parameterType="going.model.common.SearchDto" resultType="int">
        select count(*)
        from TRAVEL_ITEM
        where DELETE_YN = 0
        <include refid="search" />
    </select>

    <!-- 가격 순서, 인기 순서로 10위까지 정렬 -->
    <select id="orderByPrice" resultType="going.domain.Item">
        select *
        from (select a.*, ROWNUM as rnum
                from (
                <include refid="itemResponse"/>
                order by price asc, item_Name asc) a)
        <![CDATA[
        where rnum<= 10
        ]]>
    </select>

    <select id="orderByLike" resultType="going.domain.Item">
        select *
        from (select a.*, ROWNUM as rnum
                from (
                <include refid="itemResponse"/>
                order by like_count asc, item_Name asc) a)
        <![CDATA[
        where rnum<= 10
        ]]>
    </select>
</mapper>